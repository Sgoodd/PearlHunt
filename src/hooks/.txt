import { useCallback } from 'react';

interface Point {
  x: number;
  y: number;
}

interface Label {
  x: number;
  y: number;
  width: number;
  height: number;
}

// Calculate distance between two points
const distance = (p1: Point, p2: Point): number => {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
};

// Check if two labels overlap
const doLabelsOverlap = (l1: Label, l2: Label): boolean => {
  return !(
    l1.x + l1.width < l2.x ||
    l2.x + l2.width < l1.x ||
    l1.y + l1.height < l2.y ||
    l2.y + l2.height < l1.y
  );
};

// Check if label is within screen boundaries
const isWithinBounds = (
  label: Label,
  width: number,
  height: number,
  padding: number = 10
): boolean => {
  return (
    label.x >= padding &&
    label.y >= padding &&
    label.x + label.width <= width - padding &&
    label.y + label.height <= height - padding
  );
};

export interface LabelPlacementOptions {
  angle?: number;
  padding?: number;
  labelWidth?: number;
  labelHeight?: number;
  svgWidth?: number;
  svgHeight?: number;
  minDistance?: number;
}

const DEFAULT_OPTIONS: Required<LabelPlacementOptions> = {
  angle: 30, // Generate candidates every 30 degrees
  padding: 5,
  labelWidth: 40,
  labelHeight: 20,
  svgWidth: 800,
  svgHeight: 700,
  minDistance: 15,
};

/**
 * A hook for Desmos-style label placement
 * 
 * This creates a function that calculates optimal positions for labels around data points
 * avoiding overlaps and respecting screen boundaries.
 */
export const useLabelPlacement = () => {
  const calculateLabelPosition = useCallback(
    (
      point: Point,
      existingLabels: Label[] = [],
      options: LabelPlacementOptions = {}
    ): Label => {
      const {
        angle,
        padding,
        labelWidth,
        labelHeight,
        svgWidth,
        svgHeight,
        minDistance,
      } = { ...DEFAULT_OPTIONS, ...options };

      // Generate candidate positions around the point at different angles
      const candidates: Label[] = [];
      for (let deg = 0; deg < 360; deg += angle) {
        const radians = (deg * Math.PI) / 180;
        
        // Calculate position at this angle, at minDistance away from the point
        const x = point.x + Math.cos(radians) * minDistance - labelWidth / 2;
        const y = point.y + Math.sin(radians) * minDistance - labelHeight / 2;

        candidates.push({
          x,
          y,
          width: labelWidth,
          height: labelHeight,
        });
      }

      // Score each candidate position
      const scoredCandidates = candidates.map((candidate) => {
        let score = 0;

        // Penalty for being close to existing labels
        existingLabels.forEach((existingLabel) => {
          if (doLabelsOverlap(candidate, existingLabel)) {
            score -= 1000; // Heavy penalty for overlap
          } else {
            // Smaller penalty based on distance to other labels
            const centerToCenter = distance(
              { x: candidate.x + labelWidth / 2, y: candidate.y + labelHeight / 2 },
              { x: existingLabel.x + existingLabel.width / 2, y: existingLabel.y + existingLabel.height / 2 }
            );
            score -= 200 / centerToCenter;
          }
        });

        // Penalty for being out of bounds
        if (!isWithinBounds(candidate, svgWidth, svgHeight, padding)) {
          score -= 500;
        }

        // Penalty for distance from ideal position (prefer top-right)
        const idealAngle = Math.PI / 4; // 45 degrees (top-right)
        const candidateAngle = Math.atan2(
          (candidate.y + labelHeight / 2) - point.y,
          (candidate.x + labelWidth / 2) - point.x
        );
        const angleDiff = Math.abs(candidateAngle - idealAngle);
        score -= angleDiff * 10;

        return { candidate, score };
      });

      // Return the candidate with the highest score
      const bestCandidate = scoredCandidates.sort((a, b) => b.score - a.score)[0];
      return bestCandidate.candidate;
    },
    []
  );

  return { calculateLabelPosition };
};
